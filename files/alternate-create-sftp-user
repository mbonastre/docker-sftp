#!/bin/bash
set -Eeo pipefail

# shellcheck disable=2154
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

# Extended regular expression (ERE) for arguments
reUser='[A-Za-z0-9._][A-Za-z0-9._-]{0,31}' # POSIX.1-2008
rePass='[^:]{0,255}'
reUid='[[:digit:]]*'
reGid='[[:digit:]]*'
reDir='[^:]*'
reKey='[^:]*'
#reArgs="^($reUser)(:$rePass)(:e)?(:$reUid)?(:$reGid)?(:$reDir)?$"
reAuthLine='^ssh-[[:alnum:]]{2,20} [[:alnum:]+/]{10,} .*$'

function log() {
    echo "[$0] $*"
}

function validateArg() {
    name="$1"
    val="$2"
    re="$3"

    if [[ "$val" =~ ^$re$ ]]; then
        return 0
    else
        log "ERROR: Invalid $name \"$val\", do not match required regex pattern: $re"
        return 1
    fi
}

log "Parsing user data (line from users.conf)"
IFS=':' read -ra args <<< "$1"

skipIndex=0
chpasswdOptions=""
useraddOptions=(--no-user-group --badname)
usermodOptions=(--badname)

user="${args[0]}"; validateArg "username" "$user" "$reUser" || exit 1
pass="${args[1]}"; validateArg "password" "$pass" "$rePass" || exit 1

if [ "${args[2]}" == "e" ]; then
    chpasswdOptions="-e"
    skipIndex=1
fi

uid="${args[$((skipIndex+2))]}"; validateArg "UID" "$uid" "$reUid" || exit 1
gid="${args[$((skipIndex+3))]}"; validateArg "GID" "$gid" "$reGid" || exit 1
dir="${args[$((skipIndex+4))]}"; validateArg "dirs" "$dir" "$reDir" || exit 1
key="${args[$((skipIndex+5))]}"; validateArg "keys" "$key" "$reKey" || exit 1

log "User $user: obtaining /etc/passwd entry"

passwd_entry="$( getent passwd "$user" || true)"

IFS=':' read -ra pwentry <<< "$passwd_entry"

if [ -n "$passwd_entry" ] ; then
    already_exists=1
    Log "User $user already exists (might use usermod)"
fi

if [ -n "$uid" ]; then
    useraddOptions+=(--non-unique --uid "$uid")
    if [ "$already_exists" ] && [ "$pwentry[2]" != "$uid" ] ; then
      usermodOptions+=(--non-unique --uid "$uid")
    fi
fi

if [ -n "$gid" ]; then
    if ! getent group "$gid" > /dev/null; then
        groupadd --gid "$gid" "group_$gid"
    fi
    useraddOptions+=(--gid "$gid")
    if [ "$already_exists" ] && [ "$pwentry[3]" != "$gid" ] ; then
      usermodOptions+=(--gid "$gid")
    fi
fi

if [ "$already_exists" ] ; then
  if [ "${usermodOptions[#]}" -ne 0 ] ; then
    usermod "${usermodOptions[@]}" "$user"
  fi
else
  useradd "${useraddOptions[@]}" "$user"
fi

# Retrieving user id to use it in chown commands instead of the user name
# to avoid problems on alpine when the user name contains a '.'
uid="$(id -u "$user")"

log "Creating base dirs"

mkdir -p "/home/$user"
chown root:root "/home/$user"
chmod 755 "/home/$user"
mkdir -p "/home/$user/.ssh"
chown -R "$uid:root" "/home/$user/.ssh"
chmod 700 "/home/$user/.ssh"

# Is simpler to change password every time than work out if it has changed
if [ -n "$pass" ]; then
    log "Changing password"
    echo "$user:$pass" | chpasswd $chpasswdOptions
else
    log "Disabling password"
    usermod -p "*" "$user" # disabled password
fi

log "Creating suplemental dirs"

# Make sure dirs exists
if [ -n "$dir" ]; then
    IFS=',' read -ra dirArgs <<< "$dir"
    for dirPath in "${dirArgs[@]}"; do
        dirPath="/home/$user/$dirPath"
        if [ ! -d "$dirPath" ]; then
            log "Creating directory: $dirPath"
            mkdir -p "$dirPath"
        else
            log "Directory already exists: $dirPath"
        fi
        chown -R "$uid:users" "$dirPath"
    done
fi

log "Reading authorized keys from .ssh/keys dir"

# Add SSH keys to authorized_keys with valid permissions
userKeysQueuedDir="/home/$user/.ssh/keys"
userKeysAllowedFileTmp="$(mktemp)"
userKeysAllowedFileTmp2="$(mktemp)"
userKeysAllowedFile="/home/$user/.ssh/authorized_keys"
if [ -d "$userKeysQueuedDir" ]; then
    keylist="$userKeysQueuedDir"/*
    if [ "$keylist" != "$userKeysQueuedDir/*"] ; then
        for publickey in "$userKeysQueuedDir"/*; do
            cat "$publickey" >> "$userKeysAllowedFileTmp"
        done
    fi
fi
log "Number of keys found: $( cat $userKeysAllowedFileTmp | wc -l )"

log "Reading authorized keys from users.conf"

if [ -n "$key" ] ; then
    IFS=',' read -ra keyArgs <<< "$key"
    for keyStr in "${keyArgs[@]}"; do
        echo "${keyStr}" >> "$userKeysAllowedFileTmp"
    done
fi

log "Number of keys found: $( cat $userKeysAllowedFileTmp | wc -l )"

#  If tmp file exist and has any content
if [ -s "$userKeysAllowedFileTmp" ] ; then
    log "Filtering duplicated or invalid keys"
    sort < "$userKeysAllowedFileTmp" |
      uniq |
      grep -E "$reAuthLine" > "$userKeysAllowedFileTmp2" || true #ignore error in empty result

    log "Total number of keys found: $( cat $userKeysAllowedFileTmp2 | wc -l )"

    if diff -q "$userKeysAllowedFileTmp2" "$userKeysAllowedFile" > /dev/null 2>&1 ; then
      log "No changes in auhtorized_keys detected"
    else
      log "Creating final '$userKeysAllowedFile' file"
      mv "$userKeysAllowedFileTmp2" "$userKeysAllowedFile"
    fi
fi

if [ -f "$userKeysAllowedFile" ] ; then
    log "Setting strict permissions on '$userKeysAllowedFile' file"
    chown "$uid" "$userKeysAllowedFile"
    chmod 600 "$userKeysAllowedFile"
fi
